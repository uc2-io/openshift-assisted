- name: Split Folder Structure
  ansible.builtin.set_fact:
    vcenter_folder_split: "{{ vcenter.folder | ansible.builtin.split('/') }}"

- name: Create Folder(s)
  ansible.builtin.include_tasks:
    file: folder.yaml
  loop: "{{ vcenter_folder_split }}"

- name: Create VMs
  community.vmware.vmware_guest:
    advanced_settings:
      - key: "disk.EnableUUID"
        value: "TRUE"
    cluster: "{{ vcenter.cluster }}"
    datacenter: "{{ vcenter.datacenter }}"
    datastore: "{{ hostvars[item].datastore }}"
    disk: "{{ hostvars[item].disk | default([]) | list }}"
    folder: "/{{ vcenter.datacenter }}/vm/{{ vcenter.folder }}"
    guest_id: rhel9_64Guest
    hardware:
      boot_firmware: efi
      cpu_reservation: "{{ hostvars[item].cpu_reservation | default(0) }}"
      memory_mb: "{{ hostvars[item].memory }}"
      mem_reservation: "{{ hostvars[item].mem_reservation | default(0) }}"
      nested_virt: "{{ hostvars[item].nested_virt | default(False) }}"
      num_cpu_cores_per_socket: "{{ hostvars[item].cores }}"
      num_cpus: "{{ hostvars[item].cores }}"
      version: "{{ vcenter.hardware_version | int }}"
    hostname: "{{ vcenter.hostname }}"
    name: "{{ item }}.{{ assisted_installer.base_domain }}"
    networks:
      - name: "{{ vcenter.network }}"
        device_type: vmxnet3
    password: "{{ vcenter_password }}"
    state: present
    username: "{{ vcenter_username }}"
    validate_certs: "{{ validate_certs }}"
  loop: "{{ groups[provision_group] }}"
  register: vmware_guest_results
  when:
    - not (hostvars[item].metal_node | default(false))

- name: Combine Applicable MACs & IPs into Dictionary for Easy Lookup
  vars:
    _query: "results[?instance.hw_name==`{{ item }}.{{ assisted_installer.base_domain }}`].instance.hw_eth0.macaddress"
  ansible.builtin.set_fact:
    mac_ip_dict: >-
      {{
        mac_ip_dict | default([]) +
        [
          {
            'dns': hostvars[item].dns,
            'gateway': hostvars[item].gateway,
            'interface': hostvars[item].logical_nic_name,
            'ip': hostvars[item].ip,
            'mac': vmware_guest_results | json_query(_query) | first,
            'name': item
          }
        ]
      }}
  loop: "{{ groups[provision_group] }}"
  when:
    - not (hostvars[item].metal_node | default(false))

- name: Combine Applicable Disks & Hostnames into Dictionary for Easy Lookup
  ansible.builtin.set_fact:
    disk_name_dict: >-
      {{
        disk_name_dict | default([]) +
        [
          {
            'disks': hostvars[item].disks | default([]),
            'name': item
          }
        ]
      }}
  loop: "{{ groups[provision_group] }}"
  when:
    - not (hostvars[item].metal_node | default(false))

- name: Add Disks to VMs
  community.vmware.vmware_guest_disk:
    datacenter: "{{ vcenter.datacenter }}"
    disk:
      - controller_number: "{{ item.1.controller_number }}"
        datastore: "{{ item.1.datastore }}"
        size_gb: "{{ item.1.size_gb }}"
        state: present
        type: "{{ item.1.type }}"
        unit_number: "{{ item.1.unit_number }}"
    folder: "/{{ vcenter.datacenter }}/vm/{{ vcenter.folder }}"
    hostname: "{{ vcenter.hostname }}"
    name: "{{ item.0.name }}.{{ assisted_installer.base_domain }}"
    password: "{{ vcenter_password }}"
    username: "{{ vcenter_username }}"
    validate_certs: "{{ validate_certs }}"
  with_subelements:
    - "{{ disk_name_dict }}"
    - disks
    - skip_missing: false

- name: Combine Applicable Additional NICs & Hostnames into Dictionary for Easy Lookup
  ansible.builtin.set_fact:
    additional_nic_name_dict: >-
      {{
        additional_nic_name_dict | default([]) +
        [
          {
            'name': item,
            'nics': hostvars[item].additional_nics | default([])
          }
        ]
      }}
  loop: "{{ groups[provision_group] }}"
  when:
    - not (hostvars[item].metal_node | default(false))
    - hostvars[item].additional_nics is defined
    - hostvars[item].additional_nics | count > 0

- name: Add Additional NICs
  community.vmware.vmware_guest_network:
    datacenter: "{{ vcenter.datacenter }}"
    device_type: "{{ item.1.device_type | default('vmxnet3') }}"
    force: "{{ item.1.force | default(false) }}"
    hostname: "{{ vcenter.hostname }}"
    name: "{{ item.0.name }}.{{ assisted_installer.base_domain }}"
    network_name: "{{ item.1.network_name | default(omit) }}"
    password: "{{ vcenter_password }}"
    start_connected: "{{ item.1.start_connected | default(true) }}"
    username: "{{ vcenter_username }}"
    vlan_id: "{{ item.1.vlan_id | default(omit) }}"
  with_subelements:
    - "{{ additional_nic_name_dict }}"
    - nics
    - skip_missing: false
