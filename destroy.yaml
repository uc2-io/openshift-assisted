- name: Destroy Cluster & Cleanup
  gather_facts: false
  hosts: localhost
  tasks:
    - name: Clean up ~/.ssh/known_hosts
      when:
        - cleanup_known_hosts is defined
        - cleanup_known_hosts
      block:
        - name: Remove Lines w/ Inventory Hostname in known_hosts
          ansible.builtin.lineinfile:
            dest: ~/.ssh/known_hosts
            regexp: "^.*{{ item }}.{{ assisted_installer.base_domain }}.*$"
            state: absent
          loop: "{{ groups[provision_group] }}"

        - name: Remove Lines w/ Inventory IP in known_hosts
          ansible.builtin.lineinfile:
            dest: ~/.ssh/known_hosts
            regexp: "^.*{{ lookup('dig', item) }}.*$"
            state: absent
          loop: "{{ groups[provision_group] }}"

    - name: Lookup infra-env-id
      ansible.builtin.set_fact:
        infra_env_id: "{{ lookup('ansible.builtin.file', assisted_installer.artifact_directory + '/infra-env-id') }}"

    - name: Delete VMs
      community.vmware.vmware_guest:
        cluster: "{{ vcenter.cluster }}"
        datacenter: "{{ vcenter.datacenter }}"
        force: true
        hostname: "{{ vcenter.hostname }}"
        name: "{{ item }}.{{ assisted_installer.base_domain }}"
        password: "{{ vcenter_password }}"
        state: absent
        username: "{{ vcenter_username }}"
        validate_certs: "{{ validate_certs }}"
      loop: "{{ groups[provision_group] }}"
      when:
        - not (hostvars[item].metal_node | default(false))

    - name: Delete ISO From Datastore
      community.vmware.vsphere_file:
        datacenter: "{{ vcenter.datacenter }}"
        datastore: "{{ assisted_installer.discovery_iso_datastore }}"
        hostname: "{{ vcenter.hostname }}"
        password: "{{ vcenter_password }}"
        path: "{{ assisted_installer.cluster_name }}-{{ infra_env_id }}-{{ assisted_installer.discovery_iso_type }}.iso"
        username: "{{ vcenter_username }}"
        validate_certs: "{{ validate_certs }}"
      failed_when: false

    - name: Delete ISO From Download Path
      ansible.builtin.file:
        path: >-
          {{
            assisted_installer.discovery_iso_download_path + '/' +
            assisted_installer.cluster_name + '-' +
            infra_env_id + '-' +
            assisted_installer.discovery_iso_type + '.iso'
          }}
        state: absent

    - name: Purge Categories/Tags for vSphere Integrated Clusters
      when:
        - assisted_installer is defined
        - assisted_installer.platform_type is defined
        - assisted_installer.platform_type == "vsphere"
      block:
        - name: Query Tags
          community.vmware.vmware_tag_info:
            hostname: "{{ vcenter.hostname }}"
            password: "{{ vcenter_password }}"
            username: "{{ vcenter_username }}"
            validate_certs: "{{ validate_certs }}"
          register: vmware_tag_info_results

        - name: Debug vmware_tag_info_results
          ansible.builtin.debug:
            var: vmware_tag_info_results

        - name: Find Cluster Tags
          ansible.builtin.set_fact:
            cluster_tags: "{{ vmware_tag_info_results | community.general.json_query(_query) }}"
          vars:
            _query: "tag_info[?starts_with(tag_name, '{{ assisted_installer.cluster_name }}-')].{tag_name: tag_name, tag_category_id: tag_category_id}"

        - name: Debug cluster_tags
          ansible.builtin.debug:
            var: cluster_tags

        - name: Delete Cluster Tags
          community.vmware.vmware_tag:
            category_id: "{{ item.tag_category_id }}"
            hostname: "{{ vcenter.hostname }}"
            password: "{{ vcenter_password }}"
            state: absent
            tag_name: "{{ item.tag_name }}"
            username: "{{ vcenter_username }}"
            validate_certs: "{{ validate_certs }}"
          loop: "{{ cluster_tags }}"
          when:
            - cluster_tags | length > 0

        - name: Query Catagories
          community.vmware.vmware_category_info:
            hostname: "{{ vcenter.hostname }}"
            password: "{{ vcenter_password }}"
            username: "{{ vcenter_username }}"
            validate_certs: "{{ validate_certs }}"
          register: vmware_category_info_results

        - name: Debug vmware_category_info_results
          ansible.builtin.debug:
            var: vmware_category_info_results

        - name: Find Cluster Catagories
          ansible.builtin.set_fact:
            cluster_categories: "{{ vmware_category_info_results | community.general.json_query(_query) }}"
          vars:
            _query: "tag_category_info[?starts_with(category_name, 'openshift-{{ assisted_installer.cluster_name }}-')].category_name"

        - name: Debug cluster_categories
          ansible.builtin.debug:
            var: cluster_categories

        - name: Delete Cluster Catagories
          community.vmware.vmware_category:
            category_name: "{{ item }}"
            hostname: "{{ vcenter.hostname }}"
            password: "{{ vcenter_password }}"
            state: absent
            username: "{{ vcenter_username }}"
            validate_certs: "{{ validate_certs }}"
          loop: "{{ cluster_categories }}"
          when:
            - cluster_categories | length > 0

    - name: Delete Cluster from Red Hat Cloud Console
      ansible.builtin.import_role:
        name: assisted_installer
        tasks_from: delete
